plugins {
    id 'java'
    id 'java-library'
    id 'eclipse'
    id 'scala'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.4.1'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
}


version = "3.5.1+B"
group = "io.github.h2sxxa"
archivesBaseName = "scala3std"


java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        inheritOutputDirs = true
    }

}

compileScala {
    scalaCompileOptions.additionalParameters = ["-Xtarget", "8"] // scala/scala3#13810
}

compileJava {
    sourceCompatibility = 8 // for the IDE support

    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}


minecraft {
    mcVersion.set('1.12.2')

    // MCP Mappings
    mcpMappingChannel = 'stable'
    mcpMappingVersion = '39'
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta', 'META-INF/mods.toml']) { fcd ->
        // Replace version and mcversion
        fcd.expand(
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }


}
repositories {
    maven {
        // RetroFuturaGradle
        name 'GTNH Maven'
        url 'https://nexus.gtnewhorizons.com/repository/public/'
        allowInsecureProtocol = true
        mavenContent {
            includeGroup 'com.gtnewhorizons'
            includeGroup 'com.gtnewhorizons.retrofuturagradle'
        }
    }
    mavenCentral()
    mavenLocal() // Must be last for caching to work
}

configurations {
    shade
    implementation.extendsFrom(shade)
}

dependencies {
    shade "org.scala-lang:scala-library:2.13.15" // no need to use j8 compat because of 2.13.x
    shade "org.scala-lang:scala3-library_3:3.5.1"
}


shadowJar {
    relocate 'cross.net.minecraftforge.fml.common', 'net.minecraftforge.fml.common'
    exclude 'net'
    exclude 'cross'

    relocate 'scala.', 'scala3.'


    configurations = [project.configurations.shade]
}

tasks.named("build") {
    dependsOn(tasks.named("shadowJar"))
}

// This task is used to make `runClient` using `shadow jar` instead of `common jar`.
tasks.register('shadowCopy', Copy) {
    mustRunAfter(tasks.named("shadowJar"))

    from 'build/libs'
    into 'build/libs'
    rename { String fileName ->
        fileName.replace('-all', '-dev')
    }
    include("*-all.jar")
}

tasks.named("jar") {
    dependsOn(tasks.named("shadowJar"))
}

tasks.named("packageMcLauncher") {
    dependsOn(tasks.named("shadowCopy"))
}